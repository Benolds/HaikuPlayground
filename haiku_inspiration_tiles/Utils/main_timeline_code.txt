var wordbank:Array = ['the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'in', 'in', 'in', 'in', 'in', 'in', 'in', 'in', 'in', 'in', 'in', 'in', 'in', 'in', 'in', 'in', 'in', 'in', 'in', 'in', 'in', 'in', 'in', 'in', 'in', 'in', 'in', 'in', 'in', 'in', 'in', 'in', 'of', 'of', 'of', 'of', 'of', 'of', 'of', 'of', 'of', 'of', 'of', 'of', 'of', 'of', 'of', 'of', 'of', 'of', 'of', 'of', 'of', 'of', 'of', 'of', 'of', 'of', 'of', 'of', 'of', 'of', 'of', 'of', 'river', 'river', 'river', 'river', 'river', 'river', 'river', 'river', 'river', 'river', 'river', 'river', 'river', 'river', 'river', 'river', 'on', 'on', 'on', 'on', 'on', 'on', 'on', 'on', 'on', 'on', 'on', 'on', 'on', 'on', 'on', 'and', 'and', 'and', 'and', 'and', 'and', 'and','and', 'and', 'and', 'and', 'and', 'and', 'and', 'with', 'with', 'with', 'with', 'with', 'with', 'with', 'with', 'with', 'with', 'with', 'with', 'with', 'with', 'rocks', 'rocks', 'rocks', 'rocks', 'rocks', 'rocks', 'rocks', 'rocks', 'rocks', 'rocks', 'rocks', 'rocks', 'rocks', 'rocks', 'into', 'into', 'into', 'into', 'into', 'into', 'into', 'into', 'into', 'into', 'into', 'into', 'into', 'into', 'sea', 'sea', 'sea', 'sea', 'sea', 'sea', 'sea', 'sea', 'sea', 'sea', 'sea', 'sea', 'sea', 'sea', 'to', 'to', 'to', 'to', 'to', 'to', 'to', 'to', 'to', 'to', 'to', 'to', 'to', 'mountain', 'mountain', 'mountain', 'mountain', 'mountain', 'mountain', 'mountain', 'mountain', 'mountain', 'mountain', 'mountain', 'mountain', 'mountain', 'waves', 'waves', 'waves', 'waves', 'waves', 'waves', 'waves', 'waves', 'waves', 'waves', 'waves', 'waves', 'beach', 'beach', 'beach', 'beach', 'beach', 'beach', 'beach', 'beach', 'beach', 'beach', 'water', 'water', 'water', 'water', 'water', 'water', 'water', 'water', 'water', 'water', 'rock', 'rock', 'rock', 'rock', 'rock', 'rock', 'rock', 'rock', 'rock', 'rock', 'white', 'white', 'white', 'white', 'white', 'white', 'white', 'white', 'white', 'sun', 'sun', 'sun', 'sun', 'sun', 'sun', 'sun', 'sun', 'sun', 'from', 'from', 'from', 'from', 'from', 'from', 'from', 'from', 'from', 'desert', 'desert', 'desert', 'desert', 'desert', 'desert', 'desert', 'desert', 'desert', 'snow', 'snow', 'snow', 'snow', 'snow', 'snow', 'snow', 'snow', 'at', 'at', 'at', 'at', 'at', 'at', 'at', 'at', 'mountains', 'mountains', 'mountains', 'mountains', 'mountains', 'mountains', 'mountains', 'mountains', 'tide', 'tide', 'tide', 'tide', 'tide', 'tide', 'tide', 'tide', 'by', 'by', 'by', 'by', 'by', 'by', 'by', 'by', 'wind', 'wind', 'wind', 'wind', 'wind', 'wind', 'wind', 'wind', 'night', 'night', 'night', 'night', 'night', 'night', 'night', 'night', 'winter', 'winter', 'winter', 'winter', 'winter', 'winter', 'winter', 'winter', 'earth', 'earth', 'earth', 'earth', 'earth', 'earth', 'earth', 'light', 'light', 'light', 'light', 'light', 'light', 'light', 'ocean', 'ocean', 'ocean', 'ocean', 'ocean', 'ocean', 'ocean', 'clouds', 'clouds', 'clouds', 'clouds', 'clouds', 'clouds', 'clouds', 'sand', 'sand', 'sand', 'sand', 'sand', 'sand', 'sand', 'spring', 'spring', 'spring', 'spring', 'spring', 'spring', 'blue', 'blue', 'blue', 'blue', 'blue', 'blue', 'valley', 'valley', 'valley', 'valley', 'valley', 'valley', 'canyon', 'canyon', 'canyon', 'canyon', 'canyon', 'canyon', 'hills', 'hills', 'hills', 'hills', 'hills', 'hills', 'wave', 'wave', 'wave', 'wave', 'wave', 'wave', 'sky', 'sky', 'sky', 'sky', 'sky', 'sky', 'hot', 'hot', 'hot', 'hot', 'hot', 'hot', 'all', 'all', 'all', 'all', 'all', 'all', 'high', 'high', 'high', 'high', 'high', 'high', 'waterfall', 'waterfall', 'waterfall', 'waterfall', 'waterfall', 'surf', 'surf', 'surf', 'surf', 'surf', 'between', 'between', 'between', 'between', 'between', 'up', 'up', 'up', 'up', 'up', 'low', 'low', 'low', 'low', 'low', 'down', 'down', 'down', 'down', 'down', 'my', 'my', 'my', 'my', 'my', 'one', 'one', 'one', 'one', 'one', 'peaks', 'peaks', 'peaks', 'peaks', 'peaks', 'rain', 'rain', 'rain', 'rain', 'rain', 'morning', 'morning', 'morning', 'morning', 'morning', 'lake', 'lake', 'lake', 'lake', 'lake', 'stone', 'stone', 'stone', 'stone', 'dark', 'dark', 'dark', 'dark', 'road', 'road', 'road', 'road', 'out', 'out', 'out', 'out', 'springs', 'springs', 'springs', 'springs', 'salt', 'salt', 'salt', 'salt', 'waters', 'waters', 'waters', 'waters', 'stream', 'stream', 'stream', 'stream', 'cliffs', 'cliffs', 'cliffs', 'cliffs', 'foam', 'foam', 'foam', 'foam', 'walls', 'walls', 'walls', 'walls', 'fire', 'fire', 'fire', 'fire', 'green', 'green', 'green', 'green', 'over', 'over', 'over', 'over', 'fields', 'fields', 'fields', 'fields', 'black', 'black', 'black', 'black', 'summer', 'summer', 'summer', 'summer', 'as', 'as', 'as', 'as', 'stones', 'stones', 'stones', 'stones', 'air', 'air', 'air', 'cold', 'cold', 'cold', 'stars', 'stars', 'stars', 'dry', 'dry', 'dry', 'bright', 'bright', 'bright', 'seas', 'seas', 'seas', 'moon', 'moon', 'moon', 'its', 'its', 'its', 'temple', 'temple', 'temple', 'winds', 'winds', 'winds', 'dunes', 'dunes', 'dunes', 'shadows', 'shadows', 'shadows', 'colors', 'colors', 'colors', 'sunshine', 'sunshine', 'sunshine', 'old', 'old', 'old', 'falling', 'falling', 'falling', 'sounds', 'sounds', 'sounds', 'an', 'an', 'an', 'house', 'house', 'house', 'us', 'us', 'us', 'our', 'our', 'our', 'wild', 'wild', 'wild', 'sleep', 'sleep', 'sleep', 'each', 'each', 'each', 'time', 'time', 'time', 'meadow', 'meadow', 'meadow', 'still', 'still', 'still', 'where', 'where', 'where', 'Death', 'Death', 'Death', 'hill', 'hill', 'hill', 'storm', 'storm', 'storm', 'his', 'his', 'his', 'line', 'line', 'line', 'brook', 'brook', 'brook', 'their', 'their', 'their', 'granite', 'granite', 'granite', 'after', 'after', '-', '-', 'crystal', 'crystal', 'Valley', 'Valley', 'sound', 'sound', 'evening', 'evening', 'lava', 'lava', 'deep', 'deep', 'feet', 'feet', 'without', 'without', 'trees', 'trees', 'spirits', 'spirits', 'wet', 'wet', 'day', 'day', 'moving', 'moving', 'cemetery', 'cemetery', 'covered', 'covered', 'home', 'home', 'cliff', 'cliff', 'leaves', 'leaves', 'flooded', 'flooded', 'grave', 'grave', 'rushing', 'rushing', 'it', 'it', 'ice', 'ice', 'years', 'years', 'open', 'open', 'falls', 'falls', 'around', 'around', 'field', 'field', 'pond', 'pond', 'through', 'through', 'rim', 'rim', 'silence', 'silence', 'graves', 'graves', 'flowing', 'flowing', 'jagged', 'jagged', 'red', 'red', 'wall', 'wall', 'mouth', 'mouth', 'spindrift', 'spindrift', 'yet', 'yet', 'shadow', 'shadow', 'melting', 'melting', 'for', 'for', 'sunlight', 'sunlight', 'heat', 'heat', 'flood', 'flood', 'rolling', 'rolling', 'crater', 'crater', 'now', 'now', 'wide', 'wide', 'roar', 'roar', 'rising', 'rising', 'pool', 'pool', 'autumn', 'autumn', 'valleys', 'valleys', 'land', 'land', 'ancient', 'ancient', 'face', 'face', 'muddy', 'muddy', 'dust', 'dust', 'yellow', 'yellow', 'frozen', 'frozen', 'above', 'above', 'itself', 'itself', 'top', 'top', 'full', 'full', 'fog', 'fog', 'coastal', 'coastal', 'way', 'way', 'glacier', 'glacier', 'cool', 'cool', 'alone', 'alone', 'not', 'not', 'drop', 'drop', 'fires', 'fires', 'ground', 'ground', 'quiet', 'quiet', 'noon', 'noon', 'far', 'far', 'paths', 'paths', 'back', 'back', 'cloud', 'cloud', 'lines', 'lines', 'tides', 'tides', 'blowing', 'blowing', 'other', 'other', 'woods', 'under', 'meadows', 'bubbling', 'woman', 'rocky', 'side', 'days', 'bridge', 'coast', 'run-off', 'away', 'dreams', 'islands', 'washed', 'round', 'incoming', 'city', 'that', 'winding', 'sunset', 'going', 'across', 'volcanoes', 'bodies', 'skies', 'jasper', 'cove', 'small', 'pass', 'town', 'shore', 'highway', 'bare', 'spray', 'empty', 'wings', 'pale', 'frost', 'this', 'rivers', 'leaving', 'forest', 'ripples', 'taking', 'soft', 'smooth', 'rise', 'shining', 'lights', 'new', 'end', 'volcano', 'dawn', 'turning', 'bay', 'just', 'bottom', 'snowy', 'lips', 'covers', 'holding', 'together', 'turns', 'dried', 'box', 'following', 'pink', 'torn', 'name', 'veins', 'sunrise', 'living', 'oasis', 'eyes', 'walking', 'floods', 'come', 'comes', 'color', 'many', 'centuries', 'running', 'setting', 'listening', 'her', 'grass', 'moves', 'again', 'heather', 'fall', 'swirling', 'snowbound', 'fence', 'tracks', 'narrow', 'breaking', 'coming', 'roots', 'late'];var syllables:Object = {'the':1, 'a':1, 'in':1, 'of':1, 'river':2, 'on':1, 'with':1, 'rocks':1, 'into':2, 'sea':1, 'to':1, 'mountain':2, 'waves':1, 'beach':1, 'water':2, 'rock':1, 'white':1, 'sun':1, 'from':1, 'desert':2, 'snow':1, 'at':1, 'mountains':2, 'tide':1, 'by':1, 'wind':1, 'night':1, 'winter':2, 'earth':1, 'and':1, 'light':1, 'ocean':2, 'clouds':1, 'sand':1, 'spring':1, 'blue':1, 'valley':2, 'canyon':2, 'hills':1, 'wave':1, 'sky':1, 'hot':1, 'all':1, 'high':1, 'waterfall':3, 'surf':1, 'between':2, 'up':1, 'low':1, 'down':1, 'my':1, 'one':1, 'peaks':1, 'rain':1, 'morning':2, 'lake':1, 'stone':1, 'dark':1, 'road':1, 'out':1, 'springs':1, 'salt':1, 'waters':2, 'stream':1, 'cliffs':1, 'foam':1, 'walls':1, 'fire':1, 'green':1, 'over':2, 'fields':1, 'black':1, 'summer':2, 'as':1, 'stones':1, 'air':1, 'cold':1, 'stars':1, 'dry':1, 'bright':1, 'seas':1, 'moon':1, 'its':1, 'temple':2, 'winds':1, 'dunes':1, 'shadows':2, 'colors':2, 'sunshine':2, 'old':1, 'falling':2, 'sounds':1, 'an':1, 'house':1, 'us':1, 'our':1, 'wild':1, 'sleep':1, 'each':1, 'time':1, 'meadow':2, 'still':1, 'where':1, 'Death':1, 'hill':1, 'storm':1, 'his':1, 'line':1, 'brook':1, 'their':1, 'granite':2, 'after':1, '-':0, 'crystal':2, 'Valley':2, 'sound':1, 'evening':2, 'lava':2, 'deep':1, 'feet':1, 'without':2, 'trees':1, 'spirits':2, 'wet':1, 'day':1, 'moving':2, 'cemetery':4, 'covered':2, 'home':1, 'cliff':1, 'leaves':1, 'flooded':1, 'grave':1, 'rushing':1, 'it':1, 'ice':1, 'years':1, 'open':1, 'falls':1, 'around':2, 'field':1, 'pond':1, 'through':1, 'rim':1, 'silence':2, 'graves':1, 'flowing':2, 'jagged':2, 'red':1, 'wall':1, 'mouth':1, 'spindrift':2, 'yet':1, 'shadow':2, 'melting':2, 'for':1, 'sunlight':2, 'heat':1, 'flood':1, 'rolling':2, 'crater':2, 'now':1, 'wide':1, 'roar':1, 'rising':2, 'pool':1, 'autumn':2, 'valleys':2, 'land':1, 'ancient':2, 'face':1, 'muddy':2, 'dust':1, 'yellow':2, 'frozen':2, 'above':2, 'itself':2, 'top':1, 'full':1, 'fog':1, 'coastal':2, 'way':1, 'glacier':2, 'cool':1, 'alone':2, 'not':1, 'drop':1, 'fires':2, 'ground':1, 'quiet':2, 'noon':1, 'far':1, 'paths':1, 'back':1, 'cloud':1, 'lines':1, 'tides':1, 'blowing':2, 'other':2, 'woods':1, 'under':2, 'meadows':2, 'bubbling':2, 'woman':2, 'rocky':2, 'side':1, 'days':1, 'bridge':1, 'coast':1, 'run-off':2, 'away':2, 'dreams':1, 'islands':2, 'washed':1, 'round':1, 'incoming':3, 'city':2, 'that':1, 'winding':2, 'sunset':2, 'going':2, 'across':2, 'volcanoes':3, 'bodies':2, 'skies':1, 'jasper':2, 'cove':1, 'small':1, 'pass':1, 'town':1, 'shore':1, 'highway':2, 'bare':1, 'spray':1, 'empty':2, 'wings':1, 'pale':1, 'frost':1, 'this':1, 'rivers':2, 'leaving':2, 'forest':1, 'ripples':2, 'taking':2, 'soft':1, 'smooth':1, 'rise':1, 'shining':2, 'lights':1, 'new':1, 'end':1, 'volcano':3, 'dawn':1, 'turning':2, 'bay':1, 'just':1, 'bottom':2, 'snowy':2, 'lips':1, 'covers':2, 'holding':2, 'together':3, 'turns':1, 'dried':1, 'box':1, 'following':3, 'pink':1, 'torn':1, 'name':1, 'veins':1, 'sunrise':2, 'living':2, 'oasis':3, 'eyes':1, 'walking':2, 'floods':1, 'come':1, 'comes':1, 'color':2, 'many':2, 'centuries':3, 'running':2, 'setting':2, 'listening':3, 'her':1, 'grass':1, 'moves':1, 'again':2, 'heather':2, 'fall':1, 'swirling':2, 'snowbound':2, 'fence':1, 'tracks':1, 'narrow':2, 'breaking':2, 'coming':2, 'roots':1, 'late':1};var tileList:Array = [];var poem:Array = [];var history:String = "";var gridWidth:int = 8;var gridHeight:int = 9;var numSyllables:int = 0;var neededSyllables = [5,7,5];var currentLine:int = 0;var numHaikuToFind:int = 3;btnSubmit.addEventListener(MouseEvent.CLICK, submitButtonClicked, false, 0, true);btnRestart.addEventListener(MouseEvent.CLICK, restartButtonClicked, false, 0, true);btnComma.addEventListener(MouseEvent.CLICK, commaButtonClicked, false, 0, true);btnResetLine.addEventListener(MouseEvent.CLICK, resetLineButtonClicked, false, 0, true);enableSubmitButton(false);enableCommaButton(false);enableResetLineButton(false);function enableSubmitButton(_bVal:Boolean = true) {	btnSubmit.mouseEnabled = _bVal;	if (_bVal == false) { btnSubmit.alpha = 0.2;	} else { btnSubmit.alpha = 1.0; }}function enableCommaButton(_bVal:Boolean = true) {	btnComma.mouseEnabled = _bVal;	if (_bVal == false) { btnComma.alpha = 0.2;	} else { btnComma.alpha = 1.0; }}function enableResetLineButton(_bVal:Boolean = true) {	btnResetLine.mouseEnabled = _bVal;	if (_bVal == false) { btnResetLine.alpha = 0.2;	} else { btnResetLine.alpha = 1.0; }}for (var r:int = 0; r<gridHeight; r++) {	for (var c:int = 0; c<gridWidth; c++) {		var word:String = getRandTileWord();		var tile:Tile = new Tile(r,c,word);		tile.addEventListener(MouseEvent.CLICK, tileClicked, false, 0, true);		stage.addChild(tile);		tileList.push(tile);	}}function getRandTileWord():String {	return wordbank[Math.floor(Math.random() * wordbank.length)];}function tileClicked(e:MouseEvent):void {		if(e.currentTarget.tileState == "available")	{		poem.push(e.currentTarget.word);		numSyllables += syllables[e.currentTarget.word];		updatePoemDisplay();		updateSyllableDisplay();		e.currentTarget.tileState = "selected";		updateTilesBasedOnTile(e.currentTarget);		enableCommaButton(true);		enableResetLineButton(true);		if (numSyllables == neededSyllables[currentLine]) { enableSubmitButton(true); }	}	e.currentTarget.tileBack.gotoAndStop(e.currentTarget.tileState);}function updateTilesBasedOnTile(_givenTile:Object):void {	for (var i:int = 0; i < tileList.length; i++) {		var tile:Tile = tileList[i];		tile.updateState(_givenTile.row, _givenTile.col, _givenTile.tileState, numSyllables + syllables[tile.word], neededSyllables[currentLine]);	}}function refreshTiles(_usedOnly:Boolean = false, _newWords:Boolean = true):void {	for (var i:int = 0; i < tileList.length; i++) {		var tile:Tile = tileList[i];		if (!_usedOnly || (tile.tileState != "selected" && tile.tileState != "used")) {			if(_newWords) {				tile.word = getRandTileWord();				tile.txtWord.text = tile.word;			}			tile.tileState = "available";		} else if(tile.tileState == "selected") { tile.tileState = "used"; }		tile.tileBack.gotoAndStop(tile.tileState);	}}function submitButtonClicked(e:MouseEvent):void {	if(currentLine >= neededSyllables.length-1) { //if you finish the last line of the haiku		history += poem.join(" ") + "\n\n";		txtHistory.text = history;		refreshTiles(true, false); //use this to refresh available words between each submission!		poem = [];		numSyllables = 0;		currentLine = 0;		updateSyllableDisplay();		updatePoemDisplay();		numHaikuToFind--;		txtNumHaikuToFind.text = String(numHaikuToFind);		if(numHaikuToFind == 0) { txtWin.visible=true; }	} else { newlineButtonClicked(); }	enableSubmitButton(false);	enableCommaButton(false);	enableResetLineButton(false);}function resetLineButtonClicked(e:MouseEvent):void {		for (var i:int = 0; i < tileList.length; i++) {		var tile:Tile = tileList[i];		if (tile.tileState == "selected" || tile.tileState == "unavailable"){ tile.tileState = "available"; }				tile.tileBack.gotoAndStop(tile.tileState);	}	while(numSyllables > 0){ numSyllables -= syllables[poem.pop()]; }	updateSyllableDisplay();	updatePoemDisplay();	txtCurrentPoem.appendText("> ");	enableResetLineButton(false);}function restartButtonClicked(e:MouseEvent):void {	refreshTiles(false);	poem = [];	currentLine = 0;	numSyllables = 0;	enableSubmitButton(false);	updatePoemDisplay();	numHaikuToFind = 3;	txtNumHaikuToFind.text = numHaikuToFind.toString();	txtWin.visible=false;	history = "";	txtHistory.text = history;}function updatePoemDisplay():void {	txtCurrentPoem.text = poem.join(" ");}function updateSyllableDisplay():void {	txtNumSyllables.text = "Syllables: " + numSyllables + " ("+ (neededSyllables[currentLine]-numSyllables) +" more)";}function commaButtonClicked(e:MouseEvent):void {	poem.push(",");	updatePoemDisplay();	enableCommaButton(false);}function newlineButtonClicked(e:MouseEvent = null):void {	poem.push("\n");	updatePoemDisplay();	refreshTiles(true, false); //use this to refresh available words between each submission!	currentLine++;	numSyllables = 0;	updateSyllableDisplay();	txtCurrentPoem.appendText("> ");}